{"version":3,"sources":["firebase.js","components/list.js","components/form.js","components/user.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","Link","styled","tr","props","read","List","useState","tabIndex","setTabIndex","loaded","data","list","filter","link","group","groups","_handleInputChange","event","target","value","ordering","rows","map","key","onClick","row","index","name","href","url","rel","description","timestamp","update","className","edit","delete","size","length","items","selectedItemIndex","onChange","activeIndex","console","log","filtering","colSpan","accessibilityLabel","show","LinkForm","initialLink","id","uid","setLink","setEdit","editLink","user","useEffect","Date","toLocaleString","groupsList","onSubmit","preventDefault","add","display","direction","position","span","htmlFor","type","pattern","marginY","text","color","inline","User","class","padding","height","top","left","right","logout","alt","src","photoURL","displayName","login","links","App","setList","setUser","setEditLink","groupList","setGroupList","setFilter","toggleAdd","setLoaded","onAuthStateChanged","linksRef","database","ref","orderByChild","linkDb","keys","on","snapshot","forEach","push","val","child","Set","_addLink","newKey","_updateLink","updatedLink","match","_newForm","signInWithPopup","then","result","signOut","max-width","remove","newList","accessibilityCloseLabel","accessibilityModalLabel","heading","onDismiss","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b7a74d0.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst config ={\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: \"read-later-46541.firebaseapp.com\",\r\n    databaseURL: \"https://read-later-46541.firebaseio.com\",\r\n    projectId: \"read-later-46541\",\r\n    storageBucket: \"read-later-46541.appspot.com\",\r\n    messagingSenderId: \"7434623786\",\r\n    appId: \"1:7434623786:web:329fa43e0b87aa53ee5c53\",\r\n    measurementId: \"G-FNWGSHBCX9\"\r\n  };\r\n  // Initialize Firebase\r\nfirebase.initializeApp(config);\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const auth = firebase.auth();\r\n\r\nexport default firebase;","import React, { useState } from 'react'\r\nimport { Box, Flyout, Heading, SegmentedControl, Spinner, Container } from 'gestalt'\r\nimport styled from 'styled-components'\r\n\r\nconst Link = styled.tr`\r\n    opacity:  ${props=>(props.read === true ? '.3':'1')};\r\n    .edit {        \r\n        pointer-events: ${props=>(props.read === true ? 'none':'enabled')};        \r\n        span {\r\n            display: inline-block;\r\n            transform: rotate(135deg);\r\n        }\r\n    }\r\n`\r\n\r\nconst List = (props) => {    \r\n    const [tabIndex, setTabIndex] = useState(0)\r\n    //const [loaded,setLoaded] = useState(false)\r\n    let loaded = props.loaded\r\n    const data = props.data\r\n\r\n    \r\n    let holder = []\r\n    props.filter ? holder = data.filter(link=>link.group===props.filter) : holder = data\r\n    const list = holder\r\n    \r\n\r\n\r\n    const groups = ['All',...props.groups]\r\n\r\n    const _markRead = (link) => {\r\n        link.read = !link.read\r\n        props.update(link)\r\n    }\r\n    const _editLink = (link) => {\r\n        props.edit(link)\r\n    }    \r\n\r\n    const _handleSegmentChange = event => {  \r\n        const index = event.activeIndex      \r\n        setTabIndex(index)\r\n        console.log(groups[index])   \r\n        if(groups[index]&&index!==0){\r\n            props.filtering(groups[index])\r\n        }else{\r\n            props.filtering(null)\r\n        }     \r\n    }\r\n\r\n    const _handleTabChange = event => {  \r\n        const index = event.activeIndex      \r\n        setTabIndex(index)\r\n        console.log(groups[index])   \r\n        if(groups[index]&&index!==0){\r\n            props.filtering(groups[index])\r\n        }else{\r\n            props.filtering(null)\r\n        }     \r\n    }\r\n\r\n    const _handleInputChange = event => {        \r\n        if(event.target.value){\r\n            props.ordering(event.target.value)\r\n        }else{\r\n            props.ordering(null)\r\n        }\r\n    }\r\n\r\n    const _handleLoad = () => {\r\n        //setLoaded(loaded => !loaded)\r\n    }    \r\n\r\n    const filterList = props.groups.map((filter,key) => {\r\n        return <button onClick={_handleInputChange} value={filter} key={key}>{filter}</button>\r\n    })\r\n    //.toString().replace(/(^\\w+:|^)\\/\\//, '')\r\n    const rows = list.map((row,index) => (                          \r\n            <Link key={index} read={row.read}>\r\n                <td name=\"group\">{row.group}</td>\r\n                <td name=\"url\"><a href={row.url} rel=\"noopener noreferrer\" target=\"_blank\">{row.url}</a></td>\r\n                <td name=\"description\">{row.description}</td>\r\n                <td name=\"time\">{row.timestamp}</td>\r\n                <td name=\"read\"><button onClick={()=>_markRead(row)}><span>👁‍🗨</span></button></td>      \r\n                <td name=\"actions\"><button className=\"edit\" onClick={()=>_editLink(row)}><span>✏</span></button></td>        \r\n                <td name=\"actions\"><button className=\"delete\" onClick={()=>props.delete(row)}><span>🗑</span></button></td>     \r\n            </Link>            \r\n    ))\r\n    //<input type=\"text\" name=\"Order\" list=\"ordering\" onChange={handleInputChange}/>\r\n    //<datalist id=\"ordering\">{orderList}</datalist>\r\n    //<button onClick={handleInputChange} value=''>All</button>{filterList} \r\n    return(      \r\n        <>  \r\n                <Heading size=\"sm\">Your List</Heading>    \r\n                <Container>\r\n                {loaded ?                    \r\n                    (list.length > 0 ?                 \r\n                    <>                    \r\n                        <SegmentedControl items={groups} selectedItemIndex={tabIndex} onChange={_handleSegmentChange} />\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th name=\"group\">Group</th>\r\n                                    <th>URL</th>\r\n                                    <th>Description</th>\r\n                                    <th>Updated</th>\r\n                                    <th></th>\r\n                                    <th colSpan=\"2\"></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {rows}\r\n                            </tbody>\r\n                        </table>\r\n                    </>\r\n                    :   \r\n                    <>              \r\n                        \r\n                        <h4>No links found! Add a link to get reading (well, later)</h4>\r\n                    </>  \r\n                    )                  \r\n                    :\r\n                    <Spinner accessibilityLabel=\"random image\" show={!loaded}/> \r\n                }\r\n                </Container>\r\n                \r\n        </>\r\n            \r\n    );\r\n}\r\nexport default List;","import React, {useState, useEffect} from 'react'\r\nimport { Box, Button, Column, Divider, Label  } from 'gestalt'\r\n\r\nconst LinkForm = (props) => {  \r\n    const initialLink = {id:null,url:'',description:'',read:false,timestamp:null,uid:null,group:''}\r\n    const [link,setLink] = useState(initialLink)\r\n    const [edit,setEdit] = useState(false)\r\n\r\n    const editLink = props.link\r\n    const groups = props.groups\r\n    const user = props.user\r\n\r\n    useEffect(()=>{\r\n        if(editLink){\r\n            setLink(editLink)\r\n            setEdit(true)\r\n        }\r\n    },[editLink])\r\n\r\n\r\n\r\n    const _handleInputChange = event => {\r\n        const {name,value} = event.target\r\n        setLink({...link,[name]:value,read:false,timestamp:new Date().toLocaleString(),uid:props.user.uid})        \r\n    }\r\n\r\n    const groupsList = groups.map((group,key) => {\r\n           return <option key={key} value={group}>{group}</option>\r\n    })\r\n\r\n    /**\r\n     * <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>URL</th>\r\n                            <th>Description</th>   \r\n                            <th>Group</th>                    \r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td><input type=\"url\" pattern=\"https?://.+\" name=\"url\" onChange={_handleInputChange} value={link.url}/></td>\r\n                            <td><input name=\"description\" onChange={_handleInputChange} value={link.description} /></td> \r\n                            <td>\r\n                                <input name=\"group\" onChange={_handleInputChange} value={link.group} list=\"groups\"/>\r\n                                <datalist id=\"groups\">{groupsList}</datalist>\r\n                            </td>                \r\n\r\n                            <td><button>{edit ? '💾' : 'Add +'}</button></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n     * \r\n     */\r\n    return(\r\n        <>       \r\n        {user ?       \r\n            <form onSubmit={ event => {\r\n                event.preventDefault()\r\n                if (!link.url || !link.description) return\r\n\r\n                if(editLink){\r\n                    props.update(link)\r\n                    setEdit(false)\r\n                }\r\n                else{props.add(link)}\r\n                setLink(initialLink)\r\n            }}>\r\n                <Box display=\"flex\" direction=\"row\" position=\"relative\">\r\n                    <Column span={12}>\r\n                        <Box display=\"flex\">\r\n                            <Column span={4}>\r\n                                <Label htmlFor=\"url\">\r\n                                    <h3>URL</h3>\r\n                                </Label>\r\n                            </Column>\r\n                            <Column span={8}>\r\n                                <input type=\"url\" pattern=\"https?://.+\" name=\"url\" onChange={_handleInputChange} value={link.url}/>\r\n                            </Column>\r\n                        </Box>\r\n                        <Box display=\"flex\">\r\n                            <Column span={4}>\r\n                                <Label htmlFor=\"description\">\r\n                                    <h3>Description</h3>\r\n                                </Label>\r\n                            </Column>\r\n                            <Column span={8}>\r\n                                <input name=\"description\" onChange={_handleInputChange} value={link.description} />\r\n                            </Column>\r\n                        </Box>\r\n                        <Box display=\"flex\">\r\n                            <Column span={4}>\r\n                                <Label htmlFor=\"group\">\r\n                                    <h3>Group</h3>\r\n                                </Label>\r\n                            </Column>\r\n                            <Column span={8}>\r\n                                <input name=\"group\" onChange={_handleInputChange} value={link.group} list=\"groups\"/>\r\n                                <datalist id=\"groups\">{groupsList}</datalist>\r\n                            </Column>\r\n                        </Box>\r\n                        <Box marginY={6} >\r\n                            <Button size=\"md\" text={edit ? '💾' : 'Add +'} color=\"blue\" type=\"submit\" inline />\r\n                        </Box>\r\n                    </Column>\r\n                </Box>    \r\n            </form>\r\n            :\r\n            <h4>Login to start adding links!</h4>\r\n        }\r\n        </>\r\n        );\r\n}\r\nexport default LinkForm;","import React from 'react'\r\nimport { Avatar, Button, Box, Heading } from 'gestalt';\r\n\r\nconst User = (props) => {\r\n    const user = props.user\r\n\r\n    return (        \r\n        <div class=\"header\">\r\n        <Box padding={6} height={100}>\r\n            <Box position=\"absolute\" top left>\r\n                <Heading size=\"md\">ReadL8r</Heading>\r\n            </Box>\r\n            <Box position=\"absolute\" padding={6} top right display=\"flex\" direction=\"row\">\r\n            {user ? \r\n                    <>   \r\n                    <Button onClick={props.logout} text=\"Sign Out\" color=\"gray\" inline />  \r\n                    <Avatar size=\"md\" alt='user profile' src={user.photoURL} name={user.displayName} />\r\n                    </>           \r\n                : \r\n                <Button onClick={props.login} text=\"Sign In\" inline />\r\n            }\r\n            </Box>\r\n        </Box>\r\n        </div>\r\n        \r\n        )\r\n}\r\nexport default User;","//TODO: Styling read state\r\n//TODO: Grouping items\r\n//TODO: Reminders + scheduling\r\n//TODO: Types?\r\n\r\nimport React, { useState, useEffect }  from 'react'\r\nimport firebase, { auth, provider } from './firebase.js'\r\nimport { Button, Container, Heading, Toast, Flyout, Layer, Modal, Box } from 'gestalt'\r\n\r\nimport List from './components/list.js'\r\nimport LinkForm from './components/form.js'\r\nimport User from './components/user.js'\r\nimport 'gestalt/dist/gestalt.css';\r\nimport \"./App.scss\"\r\n\r\n/*const links = [\r\n  {   \r\n    url: \"google.com\",\r\n    description: \"Google\",\r\n    timestamp: new Date().toLocaleString(),\r\n    read: false\r\n  }\r\n]*/\r\nconst links = [];\r\n\r\nconst App = () => {\r\n  const [list,setList] = useState(links)\r\n  const [user,setUser] = useState(null)\r\n  const [editLink,setEditLink] = useState(null)\r\n  const [groupList,setGroupList] = useState([])\r\n  const [filter,setFilter] = useState(null)\r\n  const [add,toggleAdd] = useState(false)\r\n  const [loaded,setLoaded] = useState(false)\r\n\r\n  const keys = ['timestamp','group','description']\r\n\r\n  useEffect(() => {  \r\n    auth.onAuthStateChanged((user) => {\r\n      if(user){\r\n        setUser(user)\r\n      }  \r\n    })  \r\n  })   \r\n\r\n  useEffect(() => {    \r\n    //updateList(user)   \r\n    if(user) {\r\n      //setLoaded(false)\r\n      let linksRef = ''\r\n      //if(filter){linksRef = firebase.database().ref('links/' +user.uid).orderByChild('group').equalTo(filter)}\r\n      //else{\r\n        linksRef = firebase.database().ref('links/' +user.uid).orderByChild('group')\r\n      //}\r\n      let linkDb = []\r\n      let groups = []\r\n      let keys = []\r\n      linksRef.on('value', function(snapshot) {\r\n        linkDb = []\r\n        snapshot.forEach(function(link){\r\n          link.id = link.key\r\n          linkDb.push(link.val())\r\n          //console.log(link.key)\r\n          if(link.child('group').val()){\r\n            groups.push(link.child('group').val())\r\n          }          \r\n          for (let key in link.val()){\r\n            keys.push(key)\r\n          }\r\n        })\r\n        groups = [...new Set(groups)]\r\n        keys = [...new Set(keys)]\r\n        //setKeys(keys)\r\n        if(!filter){setGroupList(groups)}\r\n        setList(linkDb) \r\n        setLoaded(true) \r\n      })\r\n    }\r\n    else{\r\n      setList(links)\r\n    }\r\n    \r\n  },[user,filter])\r\n\r\n\r\n  const _addLink = link => {    \r\n    setLoaded(false)\r\n    link.timestamp = new Date().toLocaleString()\r\n    if(!link.group||link.group===''){\r\n      //link.group = 'Ungrouped'\r\n    }\r\n    setList([...list, link])\r\n    const newKey = firebase.database().ref(`links/${user.uid}`).push().key\r\n    link.id = newKey\r\n    const linksRef = firebase.database().ref(`links/${user.uid}/${newKey}`)\r\n    linksRef.update(link)    \r\n    toggleAdd(false)    \r\n    setLoaded(true) \r\n  }\r\n  const _deleteLink = link => {    \r\n    setLoaded(false)\r\n    const linksRef = firebase.database().ref(`/links/${user.uid}/${link.id}`)\r\n    linksRef.remove()\r\n    let newList = list.filter(row => row.id !== link.id )\r\n    setList(newList)    \r\n    setLoaded(true) \r\n  }\r\n\r\n  const _updateLink = updatedLink => {        \r\n    setLoaded(false)\r\n    updatedLink.timestamp = new Date().toLocaleString()\r\n    setList(list.map(row => (row.id.match(updatedLink.id) ? updatedLink : row)))   \r\n    const linksRef = firebase.database().ref(`/links/${user.uid}`).child(updatedLink.id)    \r\n    linksRef.update(updatedLink)\r\n    toggleAdd(false)    \r\n    setLoaded(true) \r\n  }\r\n\r\n  const _newForm = () => {\r\n      toggleAdd(add => !add)    \r\n      console.log(add)\r\n  }\r\n  \r\n  const _logout = () => {\r\n    auth.signOut()\r\n      .then(() => {\r\n        setUser(null)\r\n      })\r\n  }\r\n  const _login = () => {\r\n    auth.signInWithPopup(provider)\r\n      .then((result) => {\r\n        const user = result.user;\r\n        setUser(user)\r\n      })\r\n  }\r\n\r\n  const _edit = link => {\r\n    setEditLink(link)\r\n    _newForm()\r\n  }\r\n\r\n  const _filtering = event => {\r\n    setFilter(event)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">      \r\n      <User login={_login} logout={_logout} user={user} />\r\n      <Box max-width=\"100%\">\r\n      <div className=\"container mainContainer\">\r\n        <div className=\"column\">  \r\n        { user ?\r\n            <>\r\n            <List data={list} update={_updateLink} edit={_edit} delete={_deleteLink} user={user} groups={groupList} keys={keys} filter={filter} filtering={_filtering} loaded={loaded} />\r\n            \r\n            <Box padding={4}>\r\n              <Button onClick={_newForm} text=\"Add New Link\" color=\"blue\" inline />\r\n            </Box>\r\n            </>\r\n          :\r\n          <h4>Log in to see your list!</h4>\r\n        }\r\n        </div>\r\n        {add && (          \r\n          <Layer>\r\n            <Modal \r\n              accessibilityCloseLabel=\"close\"\r\n              accessibilityModalLabel=\"View random images\"\r\n              heading={editLink ? 'Edit Link' : 'Add Link'} \r\n              onDismiss={_newForm} \r\n              size=\"lg\">\r\n                <Box padding={10}>\r\n              <div className=\"column\">\r\n                {editLink ? \r\n                  <LinkForm add={_addLink} user={user} link={editLink} update={_updateLink} groups={groupList}/>\r\n                :\r\n                  <LinkForm add={_addLink} user={user} groups={groupList}/>\r\n                }\r\n              </div>\r\n              </Box>\r\n            </Modal>\r\n          </Layer>\r\n        )}\r\n      </div>\r\n      </Box>\r\n    </div>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}