{"version":3,"sources":["entry.js","tip.js","bill.js","App.js","serviceWorker.js","index.js"],"names":["Entry","props","useState","bill","setBill","className","type","name","placeholder","value","onChange","event","target","eval","onClick","reset","Tip","chosen","setChosen","handleClick","console","log","click","tips","map","t","index","key","parseFloat","Bill","tip","share","App","state","percent","setState","toFixed","calculate","toString","e","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c262651d.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nconst Entry = props => {\r\n    const[bill,setBill]=useState('');\r\n    const handleInputChange = event => {\r\n        const value = event.target.value        \r\n        setBill(value)\r\n        props.eval(event)\r\n    }\r\n    const reset = event => {    \r\n        setBill('')\r\n        props.reset()\r\n    }\r\n\r\n    return(\r\n        <div className=\"bill-entry\">\r\n            <input type=\"text\" name=\"bill\" placeholder=\"What's the Damage?\" value={bill} onChange={handleInputChange} />\r\n            <button onClick={reset}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Entry","//TODO: add custom tip\r\n//TODO: error handling for empty\r\nimport React, {useState} from 'react'\r\n\r\nconst Tip = (props) => {\r\n    const [chosen, setChosen] = useState()\r\n    function handleClick(event){\r\n        const name = event.target.name;\r\n        console.log(name);\r\n        console.log('chosen: ' +chosen);\r\n        setChosen(name)\r\n        props.click(event.target.value);\r\n    }\r\n\r\n    const tips = props.tips\r\n    return(\r\n        <div className='tips flex-row flex-small text-center'>\r\n            {tips.map((t,index)=>(            \r\n                <button onClick={handleClick} className={(chosen===(t+'-'+index)) ? \"flex-small active\" : \"flex-small\"} name={t+'-'+index} key={t} value={parseFloat(t/100)}>{t}</button>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tip","//TODO: custom tip\r\n//TODO: add person qty\r\nimport React from 'react';\r\n\r\n    const Bill = (props) => (\r\n            <div className='bill container'>\r\n                <h1 className='flex-small'><p>${props.bill} pre-tip</p></h1>\r\n                <h1 className='flex-small'><p>${props.tip} tip</p></h1>\r\n                <h1 className='flex-small'><p>${props.share} post-tip</p></h1>\r\n            </div>           \r\n    );\r\n\r\nexport default Bill","import React, {Component} from 'react';\n\nimport Entry from './entry.js';\nimport Tip from './tip.js';\nimport Bill from './bill.js';\n//import logo from './logo.svg';\nimport './App.css';\nimport './main.css'\n\nconst tips = [10,15,18,20];\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      bill: '0.00',\n      share: '0.00',\n      tip: '0.00',\n      percent: 0\n    }\n  }\n\n  eval = event => {    \n    const { value } = event.target\n    let tip = parseFloat(this.state.tip);\n    let share = parseFloat(this.state.share);\n    let bill = parseFloat(value);\n    tip = bill*parseFloat(this.state.percent);\n    share = parseFloat(value) + tip;\n    this.setState({ bill: bill.toFixed(2), share: share.toFixed(2), tip: tip.toFixed(2)})    \n  }\n\n  calculate = (value) =>{    \n    let bill = parseFloat(this.state.bill);\n    let tip = parseFloat(this.state.tip);\n    let share = parseFloat(this.state.share);//this.state.share;\n    let percent = parseFloat(value);    \n    try {      \n      tip = bill*percent;\n      share = bill + tip;\n      this.setState({\n        share: share.toFixed(2).toString(), tip: tip.toFixed(2).toString(), percent: percent})\n    }catch (e){\n      this.setState({\n        share:\"error\"\n      })\n    }\n  };  \n\n  reset = () =>{\n    let share = this.state.share;\n    let bill = this.state.bill;\n    let tip = this.state.tip;\n    try {\n      share = 0;\n      bill = 0;\n      tip = 0;\n      this.setState({share: share.toFixed(2), bill:bill.toFixed(2), tip:tip.toFixed(2)})\n    }catch (e){\n      this.setState({\n        share:\"error\"\n      })\n    }\n  };  \n\n  render(){ \n    return (\n      <div className=\"App\">\n        <h1>Just The Tip!</h1>\n        <div className='container small-container'>\n          <Entry eval={this.eval} reset={this.reset}/> \n          <Tip tips={tips} click={this.calculate} />\n          <Bill bill={this.state.bill} share={this.state.share} tip={this.state.tip}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}